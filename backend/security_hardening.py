#!/usr/bin/env python3
"""
Security Hardening Script for Lead G Application
This script helps fix critical security issues identified in the security audit.
"""
import secrets
import bcrypt
import os
from pathlib import Path

def generate_jwt_secret():
    """Generate a secure JWT secret key"""
    return secrets.token_hex(32)

def hash_password(password):
    """Hash a password using bcrypt"""
    salt = bcrypt.gensalt(rounds=12)
    return bcrypt.hashpw(password.encode('utf-8'), salt).decode('utf-8')

def create_secure_env_file():
    """Create a secure .env file template"""
    jwt_secret = generate_jwt_secret()
    
    print("=" * 60)
    print("SECURITY HARDENING - Environment Configuration")
    print("=" * 60)
    print()
    
    # Get admin credentials from user
    print("üìù Admin Credentials Setup")
    print("-" * 60)
    admin_email = input("Enter admin email: ").strip()
    
    while True:
        admin_password = input("Enter admin password (min 12 chars, mixed case, numbers, symbols): ").strip()
        if len(admin_password) < 12:
            print("‚ùå Password too short. Must be at least 12 characters.")
            continue
        if not any(c.isupper() for c in admin_password):
            print("‚ùå Password must contain at least one uppercase letter.")
            continue
        if not any(c.islower() for c in admin_password):
            print("‚ùå Password must contain at least one lowercase letter.")
            continue
        if not any(c.isdigit() for c in admin_password):
            print("‚ùå Password must contain at least one number.")
            continue
        if not any(c in '!@#$%^&*()_+-=[]{}|;:,.<>?' for c in admin_password):
            print("‚ùå Password must contain at least one special character.")
            continue
        break
    
    # Hash the password
    hashed_password = hash_password(admin_password)
    
    print()
    print("üîê CORS Configuration")
    print("-" * 60)
    print("Enter allowed origins (comma-separated):")
    print("Example: https://yourdomain.com,https://www.yourdomain.com")
    cors_origins = input("CORS Origins: ").strip()
    
    # Create .env content
    env_content = f"""# ========================================
# SECURITY CONFIGURATION
# ========================================
# WARNING: NEVER commit this file to git!
# Generated by security_hardening.py

# JWT Configuration
JWT_SECRET_KEY="{jwt_secret}"
JWT_ALGORITHM="HS256"
JWT_EXPIRE_MINUTES="15"

# Admin Credentials (bcrypt hashed)
ADMIN_EMAIL="{admin_email}"
ADMIN_PASSWORD_HASH="{hashed_password}"
# NOTE: Update server.py to use ADMIN_PASSWORD_HASH instead of ADMIN_PASSWORD

# CORS Configuration
CORS_ORIGINS="{cors_origins}"
ENABLE_CORS_ALL_ORIGINS="false"
ALLOW_ALL_METHODS="false"
ALLOW_ALL_HEADERS="false"

# Environment
ENVIRONMENT="production"
DEBUG="False"

# Database
MONGO_URL="mongodb://localhost:27017"
DB_NAME="leadg_production"

# Firebase (if using real Firebase)
FIREBASE_PROJECT_ID="your-project-id"
FIREBASE_CREDENTIALS_PATH="/app/backend/firebase-credentials.json"
"""
    
    # Save to file
    env_file = Path('/app/backend/.env.secure')
    env_file.write_text(env_content)
    
    print()
    print("‚úÖ Secure environment file created!")
    print("=" * 60)
    print()
    print("üìã NEXT STEPS:")
    print("1. Review the generated file: /app/backend/.env.secure")
    print("2. Backup your current .env: cp /app/backend/.env /app/backend/.env.backup")
    print("3. Replace with secure version: mv /app/backend/.env.secure /app/backend/.env")
    print("4. Update server.py to use bcrypt password verification")
    print("5. Restart backend service: sudo supervisorctl restart backend")
    print()
    print("‚ö†Ô∏è  IMPORTANT:")
    print("- Keep a backup of these credentials in a secure password manager")
    print("- Never commit .env file to git")
    print("- Rotate credentials every 90 days")
    print()
    print("=" * 60)
    print()
    print("üîë CREDENTIALS (Save these securely!):")
    print("-" * 60)
    print(f"Admin Email: {admin_email}")
    print(f"Admin Password: {admin_password}")
    print(f"JWT Secret: {jwt_secret}")
    print()
    print("=" * 60)

def check_gitignore():
    """Ensure .env is in .gitignore"""
    gitignore_file = Path('/app/.gitignore')
    
    if gitignore_file.exists():
        content = gitignore_file.read_text()
        if '.env' not in content:
            print("‚ö†Ô∏è  WARNING: .env not found in .gitignore")
            print("   Adding .env to .gitignore...")
            with gitignore_file.open('a') as f:
                f.write('\n# Environment variables (SECURITY)\n')
                f.write('.env\n')
                f.write('.env.local\n')
                f.write('.env.*.local\n')
                f.write('backend/.env\n')
                f.write('frontend/.env\n')
            print("‚úÖ Added .env to .gitignore")
    else:
        print("‚ö†Ô∏è  No .gitignore file found. Creating one...")
        gitignore_file.write_text("""# Environment variables (SECURITY)
.env
.env.local
.env.*.local
backend/.env
frontend/.env

# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
venv/
env/

# Node
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db
""")
        print("‚úÖ Created .gitignore file")

def main():
    print()
    print("üîí LEAD G - SECURITY HARDENING TOOL")
    print("=" * 60)
    print()
    print("This tool will help you fix critical security issues:")
    print("1. Generate secure JWT secret")
    print("2. Create strong admin credentials")
    print("3. Configure CORS properly")
    print("4. Hash passwords with bcrypt")
    print()
    
    response = input("Continue? (yes/no): ").lower().strip()
    if response not in ['yes', 'y']:
        print("Aborted.")
        return
    
    print()
    check_gitignore()
    print()
    create_secure_env_file()

if __name__ == "__main__":
    main()
